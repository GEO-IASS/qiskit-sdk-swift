%{

#import "ParserBlocks.h"
#import "ParseTree.h"

int yylex(void);
void yyerror(char *s);

%}

%union {
    int ivalue;
    float fvalue;
    __unsafe_unretained NSString *svalue;
    __unsafe_unretained Node *node;
}

%token <svalue> ID
%token <svalue> QREG
%token <svalue> CREG
%token <svalue> GATE
%token <svalue> U
%token <svalue> CX
%token <svalue> BARRIER
%token <svalue> OPAQUE
%token <svalue> MEASURE
%token <svalue> ASSIGN
%token <svalue> RESET
%token <svalue> MATCHES
%token <svalue> IF

%token <svalue> SIN
%token <svalue> COS
%token <svalue> TAN
%token <svalue> EXP
%token <svalue> LN

%token <fvalue> PI
%token <fvalue> REAL
%token <ivalue> NNINTEGER

%type <node> explist
%type <node> exp
%type <node> real
%type <node> nninteger

%left ','
%right '='
%left '+' '-'
%left '*' '/'
%left '(' ')'

%%
uop : explist { if (ParseSuccessBlock) ParseSuccessBlock($1); }

explist : exp
| exp ',' explist { $$ = [ParseTree createNode: 'L' left: $1 right: $3];  }

exp : exp '+' exp { $$ = [ParseTree createNode: '+' left: $1 right: $3];  }
| exp '-' exp { $$ = [ParseTree createNode: '-' left: $1 right: $3]; }
| exp '*' exp { $$ =[ParseTree createNode: '*' left: $1 right: $3];  }
| exp '/' exp { $$ = [ParseTree createNode: '/' left: $1 right: $3];  }
| exp '^' exp { $$ = [ParseTree createNode: '^' left: $1 right: $3]; }
| '-' exp %prec '-' { $$ = [ParseTree createNode: 'M' left: $2 right: nil]; }
| '(' exp ')' { $$ = $2; }
| real { $$ = $1; }
| nninteger { $$ = $1; }

real : REAL { $$ = [ParseTree createRealNodeWithValue: $1]; }
nninteger : NNINTEGER { $$ = [ParseTree createNNIntegerNodeWithValue: $1]; }

%%
