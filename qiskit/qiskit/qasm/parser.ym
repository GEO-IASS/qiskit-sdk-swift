%{

#import "ParserBlocks.h"
#import "ParseTree.h"

int yylex(void);
void yyerror(char *s);

%}

%union {
    int ivalue;
    float fvalue;
    __unsafe_unretained NSString *svalue;
    __unsafe_unretained Node *node;
}

%token <svalue> OPENQASM
%token <ivalue> NNINTEGER
%token <svalue> BARRIER
%token <svalue> OPAQUE
%token <svalue> RESET
%token <svalue> IF
%token <fvalue> REAL
%token <svalue> QREG
%token <svalue> CREG
%token <svalue> GATE
%token <svalue> PI
%token <svalue> CX
%token <svalue> U
%token <svalue> MEASURE
%token <svalue> MAGIC
%token <svalue> ASSIGN
%token <svalue> MATCHES
%token <svalue> ID
%token <svalue> INCLD
%token <svalue> STRING
%token <svalue> ARROW

%token <svalue> SIN
%token <svalue> COS
%token <svalue> TAN
%token <svalue> EXP
%token <svalue> LN
%token <svalue> SQRT

%type <node> mainprogram
%type <node> include
%type <node> program
%type <node> statment
%type <node> decl
%type <node> gatedecl
%type <node> goplist
%type <node> qop
%type <node> uop
%type <node> anylist
%type <node> mixedlist
%type <node> idlist
%type <node> argument
%type <node> explist
%type <node> exp
%type <node> real
%type <node> nninteger
%type <node> id
%type <node> pi
%type <node> u
%type <node> cx
%type <node> creg
%type <node> qreg
%type <node> barrier
%type <node> gate
%type <node> measure
%type <node> opaque
%type <node> reset
%type <node> ifn
%type <node> openqasm
%type <svalue> unaryop
%type <svalue> arrow
%type <svalue> assign
%type <svalue> string
%type <svalue> incld

%left ','
%right '='
%left '+' '-'
%left '*' '/'
%left '(' ')'

%%

mainprogram : openqasm real ';' program {
    $$ = [ParseTree createMainProgram: $1 version: $2 include: nil program: $4];
    ParseSuccessBlock($$);
}
| openqasm real ';' include program {
    $$ = [ParseTree createMainProgram: $1 version: $2 include: $4 program: $5];
    ParseSuccessBlock($$);
}

include : incld string ';' { $$ = [ParseTree createIncludeNode: $2]; }

program : statment { $$ = [ ParseTree createProgramNode: nil statement: $1]; }
| program statment { $$ = [ ParseTree createProgramNode: $1 statement: $2]; }

statment : decl { $$ = [ ParseTree createStatmentNode: $1 p2: nil p3: nil p4: nil]; }
| gatedecl goplist '}' { $$ = [ ParseTree createStatmentNode: $1 p2: $2 p3: nil p4: nil]; }
| gatedecl '}' { $$ = [ ParseTree createStatmentNode: $1 p2: nil p3: nil p4: nil]; }
| opaque id idlist ';' { $$ = [ ParseTree createStatmentNode: $1 p2: $2 p3: $3 p4: nil]; }
| opaque id '(' ')' idlist ';' { $$ = [ ParseTree createStatmentNode: $1 p2: $2 p3: $5 p4: nil]; }
| opaque id '(' idlist ')' idlist ';' { $$ = [ ParseTree createStatmentNode: $1 p2: $2 p3: $4 p4: $6]; }
| qop { $$ = [ ParseTree createStatmentNode: $1 p2: nil p3: nil p4: nil]; }
| ifn '(' id assign nninteger ')' qop { $$ = [ ParseTree createStatmentNode: $1 p2: $3 p3: $5 p4: $7]; }
| barrier anylist ';' { $$ = [ ParseTree createStatmentNode: $1 p2: $2 p3: nil p4: nil]; }

decl : qreg id '[' nninteger ']' ';' { $$ = [ ParseTree createDeclNode: $1 identifier: $2 nninteger: $4]; }
| creg id '[' nninteger ']' ';' { $$ = [ ParseTree createDeclNode: $1 identifier: $2 nninteger: $4]; }

gatedecl : gate id idlist '{' { $$ = [ParseTree createGateDeclNode: $1 identifier: $2 idlist1: $3 idlist2: nil]; }
| gate id '(' ')' idlist '{' { $$ = [ParseTree createGateDeclNode: $1 identifier: $2 idlist1: $5 idlist2: nil]; }
| gate id '(' idlist ')' idlist '{' { $$ = [ParseTree createGateDeclNode: $1 identifier: $2 idlist1: $4 idlist2: $6]; }

goplist : uop { $$ = [ParseTree createGoplistNode: nil uop: $1 idlist: nil goplist: nil]; }
| barrier idlist { $$ = [ParseTree createGoplistNode: $1 uop: nil idlist: $2 goplist: nil]; }
| goplist  uop { $$ = [ParseTree createGoplistNode: nil uop: $2 idlist: nil goplist: $1]; }
| goplist barrier idlist { $$ = [ParseTree createGoplistNode: $2 uop: nil idlist: $3 goplist: $1]; }

qop : uop { $$ = [ParseTree createQopNode: $1 object2: nil object3: nil]; }
| measure argument arrow argument ';' { $$ = [ParseTree createQopNode: $1 object2: $2 object3: $4]; }
| measure '(' argument ')' arrow '(' argument ')' ';' { $$ = [ParseTree createQopNode: $1 object2: $3 object3: $7]; }
| reset '(' argument ')' ';' { $$ = [ParseTree createQopNode: $1 object2: $3 object3: nil]; }

uop : u '(' exp ')' argument ';' { $$ = [ParseTree createUniversalUnitary: $1 object2: $3 object3: $5]; }
| cx argument ',' argument ';' { $$ = [ParseTree createUniversalUnitary: $1 object2: $2 object3: $4]; }
| id anylist ';' { $$ = [ParseTree  createUniversalUnitary: $1 object2: $2 object3: nil]; }
| id '(' ')' anylist ';' { $$ = [ParseTree  createUniversalUnitary: $1 object2: $4 object3: nil]; }
| id '(' explist ')' anylist ';' { $$ = [ParseTree  createUniversalUnitary: $1 object2: $3 object3: $5]; }

anylist: idlist { $$ = [ParseTree createAnylistNode: $1]; }
| mixedlist { $$ = [ParseTree createAnylistNode: $1];  }

idlist: id { $$ = [ParseTree createIdlistNode: nil identifier: $1]; }
| idlist ',' id { $$ = [ParseTree createIdlistNode: $1 identifier: $3]; }

mixedlist: argument { $$ = [ParseTree createMixedlistNode: nil idlist: nil argument: $1]; }
| mixedlist ',' argument { $$ = [ParseTree createMixedlistNode: $1 idlist: nil argument: $3]; }
| idlist ',' argument { $$ = [ParseTree createMixedlistNode: nil idlist: $1 argument: $3]; }

argument : id { $$ = [ParseTree createIndexedIdNode: $1 parameter: nil]; }
| id '[' nninteger ']' { $$ = [ParseTree createIndexedIdNode: $1 parameter: $3]; }

explist : exp { $$ = $1;  }
| exp ',' explist { $$ = [ParseTree createExpressionList: $1 explist: $3]; }

exp : exp '+' exp { $$ = [ParseTree createBinaryOperation: @"+" operand1: $1 operand2: $3];  }
| exp '-' exp { $$ = [ParseTree createBinaryOperation: @"-" operand1: $1 operand2: $3]; }
| exp '*' exp { $$ = [ParseTree createBinaryOperation: @"*" operand1: $1 operand2: $3];  }
| exp '/' exp { $$ = [ParseTree createBinaryOperation: @"/" operand1: $1 operand2: $3];  }
| exp '^' exp { $$ = [ParseTree createBinaryOperation: @"^" operand1: $1 operand2: $3]; }
| '-' exp %prec '-' { $$ = [ParseTree createPrefixOperation: @"-" operand: $2]; }
| unaryop '(' exp ')' { $$ = [ParseTree createPrefixOperation: $1 operand: $3]; }
| '(' exp ')' { $$ = $2; }
| real { $$ = $1; }
| nninteger { $$ = $1; }
| id { $$ = $1; }
| pi { $$ = $1; }

nninteger : NNINTEGER { $$ = [ParseTree createIntNodeWithValue: $1]; }

real : REAL { $$ = [ParseTree createRealNodeWithValue: $1]; }
pi : PI { $$ = [ParseTree createRealNodeWithValue: M_PI]; }
id : ID { $$ = [ParseTree createIdNodeWithValue: $1]; }

u : U { $$ = [ParseTree createUNode]; }
cx: CX { $$ = [ParseTree createCXNode]; }
creg: CREG { $$ = [ParseTree createCRegNode]; }
qreg: QREG { $$ = [ParseTree createQRegNode]; }
barrier: BARRIER { $$ = [ParseTree createBarrierNode]; }
gate: GATE { $$ = [ParseTree createGateNode]; }
measure: MEASURE { $$ = [ParseTree createMeasureNode]; }
opaque: OPAQUE { $$ = [ParseTree createOpaqueNode]; }
reset: RESET { $$ = [ParseTree createResetNode]; }
ifn: IF { $$ = [ParseTree createIfNode]; }
openqasm: OPENQASM { $$ = [ParseTree createMagicNode]; }

arrow: ARROW { $$ = $1; }
assign: ASSIGN { $$ = $1; }
string: STRING { $$ = $1; }
incld: INCLD { $$ = $1; }

unaryop : SIN { $$ = $1; }
| COS { $$ = $1; }
| TAN { $$ = $1; }
| EXP { $$ = $1; }
| LN { $$ = $1; }
| SQRT { $$ = $1; }


%%
