%{

#import "ParserBlocks.h"

int yylex(void);
void yyerror(char *s);

%}

%union {
    int ivalue;
    float fvalue;
    __unsafe_unretained NSString *svalue;
}

%token <svalue> ID
%token <svalue> QREG
%token <svalue> CREG
%token <svalue> GATE
%token <svalue> U
%token <svalue> CX
%token <svalue> BARRIER
%token <svalue> OPAQUE
%token <svalue> MEASURE
%token <svalue> ASSIGN
%token <svalue> RESET
%token <svalue> MATCHES
%token <svalue> IF

%token <svalue> SIN
%token <svalue> COS
%token <svalue> TAN
%token <svalue> EXP
%token <svalue> LN
%token <svalue> SQRT

%token <fvalue> PI
%token <fvalue> REAL
%token <ivalue> NNINTEGER

%type <fvalue> explist
%type <fvalue> exp
%type <fvalue> real
%type <fvalue> nninteger

%left '+' '-'
%left '*' '/' '^'

%%
uop : explist { if (ParseSuccessBlock) ParseSuccessBlock($1); }

explist : exp { $$ = $1; }
| explist, exp

exp : exp '+' exp { $$ = $1 + $3; }
| exp '-' exp { $$ = $1 - $3; }
| exp '*' exp { $$ = $1 * $3; }
| exp '/' exp { $$ = $1 / $3; }
| exp '^' exp { $$ = pow ($1, $3); }
| '-' exp { $$ = -$2; }
| '(' exp ')' { $$ = $2; }
| real { $$ = $1; }
| nninteger { $$ = $1; }

real : REAL { $$ = $1; }
nninteger : NNINTEGER { $$ = $1; }

%%
