%{

#import "y.tab.h"
#import "ParserBlocks.h"
    
void yyerror(char *s);

%}

%option yylineno

%%
(([0-9]+|([0-9]+)?\.[0-9]+|[0-9]+\.)[eE][+-]?[0-9]+)|(([0-9]+)?\.[0-9]+|[0-9]+\.) {
    float f = atof(yytext);
    yylval.fvalue = f;
    return REAL;
}

[1-9]+[0-9]*|0 {
    int i = atoi(yytext);
    yylval.ivalue = i;
    return NNINTEGER;
}

pi {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return PI;
}

sin {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return SIN;
}

cos {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return COS;
}

tan {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return TAN;
}

exp {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return EXP;
}

ln {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return LN;
}

sqrt {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return SQRT;
}

qreg {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return QREG;
}

creg {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return CREG;
}

gate {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return GATE;
}

measure {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return MEASURE;
}

if {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return IF;
}

reset {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return RESET;
}

barrier {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return BARRIER;
}

opaque {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return OPAQUE;
}

\"([^\\\"]|\\.)*\" { 
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return STRING;
}

include {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return INCLD;
}

OPENQASM {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return OPENQASM;
}

"//".*  {
}

CX {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return CX;
}

U {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return U;
}

-> {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return ARROW;
}

== {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return MATCHES;
}


[a-z][a-zA-Z0-9_]* {
    yylval.svalue = [NSString stringWithFormat:@"%s", yytext];
    return ID;
}

\n+ {
}

[ \t\r] {
}

. {
    return yytext[0];
}

%%

int yywrap()
{
    return 1;
}

void yyerror(char *s)
{
    if (ParseFailBlock)
    ParseFailBlock([NSString stringWithFormat:@"%s line %d", s, yylineno]);
}

